#! /usr/bin/env python

PACKAGE='avt_vimba_ros'

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

trigger_mode_enum = gen.enum( [ gen.const("Freerun",       str_t, "Freerun",   "Run at maximum frame rate"),
																gen.const("FixedRate",     str_t, "fixedrate", "Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`"),
				                        gen.const("Software",    	 str_t, "software",  "Software inititated image capture"),
				                        gen.const("External1Mode", str_t, "syncin1",   "External trigger on SyncIn1 line"),
				                        gen.const("External2Mode", str_t, "syncin2",   "External trigger on SyncIn2 line"),
				                        gen.const("External3Mode", str_t, "syncin3",   "External trigger on SyncIn3 line"),
				                        gen.const("External4Mode", str_t, "syncin4",   "External trigger on SyncIn4 line")], "Set Trigger Mode")
acquisition_mode_enum = gen.enum( [ gen.const("Continuous",  str_t, "Continuous",  "After an acquisition start event, the camera will continuously receive frame trigger events.),																		gen.const("SingleFrame", str_t, "SingleFrame", "The camera will only deliver a single frame trigger event"),
						                        gen.const("MultiFrame",  str_t, "MultiFrame",  "The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored"),
						                        gen.const("Recorder", 	 str_t, "Recorder",    "The camera will continuously record images into the camera on-board memory")] "Set Trigger Mode")

# Monochrome cameras have mono8,12 and 12Packed. Color cameras have only mono8.
pixelformat_enum = gen.enum([ gen.const("Mono8",           str_t, "Mono8", 					 "Mono8"),
                							gen.const("Mono12",          str_t, "Mono12" , 				 "Mono12"),
                							gen.const("Mono12Packed",    str_t, "Mono12Packed",    "Mono12Packed"),
                							gen.const("BayerRG8",        str_t, "BayerRG8",        "BayerRG8")
															gen.const("BayerRG12Packed", str_t, "BayerRG12Packed", "BayerRG12Packed")
															gen.const("BayerGR12", 			 str_t, "BayerGR12", 			 "BayerGR12")
															gen.const("RGB8Packed", 		 str_t, "RGB8Packed", 		 "RGB8Packed")
															gen.const("BGR8Packed",      str_t, "BGR8Packed", 		 "BGR8Packed")
															gen.const("YUV411Packed",    str_t, "YUV411Packed", 	 "YUV411Packed")
															gen.const("YUV422Packed",    str_t, "YUV422Packed", 	 "YUV422Packed")
															gen.const("YUV444Packed",    str_t, "YUV444Packed", 	 "YUV444Packed")], "Set Pixel Format")

exposure_auto_enum = gen.enum([ gen.const("Off",           str_t, "Off", 					 "Off"),
                								gen.const("Once",          str_t, "Once" , 				 "Once"),
                								gen.const("Continuous",    str_t, "Continuous",    "Continuous")], "Set Auto Exposure")

gain_auto_enum = gen.enum([ gen.const("Off",           str_t, "Off", 					 "Off"),
            								gen.const("Once",          str_t, "Once" , 				 "Once"),
            								gen.const("Continuous",    str_t, "Continuous",    "Continuous")], "Set Auto Gain")

balance_white_auto_enum = gen.enum([ gen.const("Off",           str_t, "Off", 					 "Off"),
				            								 gen.const("Once",          str_t, "Once" , 				 "Once"),
				            								 gen.const("Continuous",    str_t, "Continuous",    "Continuous")], "Set Auto White Balance")

#       Name                    Type      Reconfiguration level             Description         Default   Min   Max
# TRIGGER
gen.add("trigger_mode",         str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger mode", "streaming", edit_method = mode_enum)
gen.add("trigger_rate",         double_t, SensorLevels.RECONFIGURE_RUNNING, "Sets the expected triggering rate in externally triggered mode.", 15, 1, 100)

# EXPOSURE
gen.add("auto_exposure",        bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Sets the camera exposure. If continously automatic, causes the `~exposure` setting to be ignored.", "Continuous", edit_method = exposure_auto_enum)
gen.add("exposure_auto_max",    double_t, SensorLevels.RECONFIGURE_RUNNING, "The max exposure time in auto exposure mode, in seconds.", 0.5, 0.000025, 60.0)
gen.add("exposure_auto_target", int_t,    SensorLevels.RECONFIGURE_RUNNING, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", 50, 0, 100)
gen.add("exposure",             double_t, SensorLevels.RECONFIGURE_RUNNING, "Camera exposure time in seconds.", 0.025, 0.000025, 60.0)

# GAIN
gen.add("auto_gain",            bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Sets the analog gain. If continously automatic, causes the `~gain` setting to be ignored.", "Continuous", edit_method = gain_auto_enum)
gen.add("gain_auto_max",        int_t,    SensorLevels.RECONFIGURE_RUNNING, "The max gain level in auto gain mode, in dB.", 33, 0, 33)
gen.add("gain_auto_target",     int_t,    SensorLevels.RECONFIGURE_RUNNING, "The auto gain target mean value as a percentage, from 0=black to 100=white.", 50, 0, 100)
gen.add("gain",                 int_t,    SensorLevels.RECONFIGURE_RUNNING, "The gain level in dB.", 0, 0, 33)

# WHITE BALANCE
gen.add("auto_whitebalance",    bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Whether whitebalance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", True)
gen.add("whitebalance_red",     int_t,    SensorLevels.RECONFIGURE_RUNNING, "Red gain as a percentage of the camera default setting.", 100, 80, 300)
gen.add("whitebalance_blue",    int_t,    SensorLevels.RECONFIGURE_RUNNING, "Blue gain as a percentage of the camera default setting.", 100, 80, 300)

# BINNING & DEDIMATION
gen.add("binning_x",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of pixels to bin together horizontally.", 1, 1, 8)
gen.add("binning_y",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of pixels to bin together vertically.", 1, 1, 14)
gen.add("decimation_x",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of decimation operations in x.", 1, 1, 8)
gen.add("decimation_y",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of decimation operations in y.", 1, 1, 8)

# ROI
gen.add("x_offset",             int_t,    SensorLevels.RECONFIGURE_RUNNING, "X offset of the region of interest.", 0, 0, 2447)
gen.add("y_offset",             int_t,    SensorLevels.RECONFIGURE_RUNNING, "Y offset of the region of interest.", 0, 0, 2049)
gen.add("width",                int_t,    SensorLevels.RECONFIGURE_RUNNING, "Width of the region of interest (0 for automatic).", 0, 0, 2448)
gen.add("height",               int_t,    SensorLevels.RECONFIGURE_RUNNING, "Height of the region of interest (0 for automatic).", 0, 0, 2050)

# ROS 
gen.add("frame_id",             str_t,    SensorLevels.RECONFIGURE_RUNNING, "The optical camera TF frame set in message headers.", "")
gen.add("trigger_timestamp_topic", str_t, SensorLevels.RECONFIGURE_STOP,    "Sets the topic from which an externally trigged camera receives its trigger timestamps.", "")


# BANDWIDTH
gen.add("auto_adjust_stream_bytes_per_second", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Whether the node should automatically adjust the data rate. Causes `~stream_bytes_per_second` to be ignored.", True)
gen.add("stream_bytes_per_second", int_t, SensorLevels.RECONFIGURE_RUNNING, "Limits the data rate of the camera.", 45000000, 1, 115000000)

gen.add("pixel_format",         str_t,    SensorLevels.RECONFIGURE_CLOSE,   "Format of the image data.", "BayerRG8", edit_method=pixelformat_enum)

exit(gen.generate(PACKAGE, "avt_vimba_ros", "AvtVimbaRos"))
