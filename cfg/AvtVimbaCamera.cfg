#! /usr/bin/env python

PACKAGE='avt_vimba_camera'

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

trigger_mode_enum = gen.enum( [ gen.const("Freerun",       int_t, 0,   "Run at maximum frame rate"),
				                        gen.const("SyncIn1",       int_t, 1,   "External trigger on SyncIn1 line"),
				                        gen.const("SyncIn2",       int_t, 2,   "External trigger on SyncIn2 line"),
				                        gen.const("SyncIn3",       int_t, 3,   "External trigger on SyncIn3 line"),
				                        gen.const("SyncIn4",       int_t, 4,   "External trigger on SyncIn4 line"),
																gen.const("FixedRate",     int_t, 5,   "Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`"),
				                        gen.const("Software",    	 int_t, 6,   "Software inititated image capture")], "Set Trigger Mode")
acquisition_mode_enum = gen.enum( [ gen.const("Continuous",  int_t, 0, "After an acquisition start event, the camera will continuously receive frame trigger events."),
																		gen.const("SingleFrame", int_t, 1, "The camera will only deliver a single frame trigger event"),
																		gen.const("MultiFrame",  int_t, 2, "The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored"),
																		gen.const("Recorder", 	 int_t, 3, "The camera will continuously record images into the camera on-board memory")], "Set Trigger Mode")
# Monochrome cameras have mono8,12 and 12Packed. Color cameras have only mono8.
pixelformat_enum = gen.enum([ gen.const("Mono8",           int_t,  0, "Mono8"),
                							gen.const("Mono12",          int_t,  1, "Mono12"),
                							gen.const("Mono12Packed",    int_t,  2, "Mono12Packed"),
                							gen.const("BayerRG8",        int_t,  3, "BayerRG8"),
															gen.const("BayerRG12Packed", int_t,  4, "BayerRG12Packed"),
															gen.const("BayerGR12", 			 int_t,  5, "BayerGR12"),
															gen.const("RGB8Packed", 		 int_t,  6, "RGB8Packed"),
															gen.const("BGR8Packed",      int_t,  7, "BGR8Packed"),
															gen.const("YUV411Packed",    int_t,  8, "YUV411Packed"),
															gen.const("YUV422Packed",    int_t,  9, "YUV422Packed"),
															gen.const("YUV444Packed",    int_t, 10, "YUV444Packed")], "Set Pixel Format")

auto_enum = gen.enum([ gen.const("Off",  int_t, 0, "Off"),
      								 gen.const("Once", int_t, 1, "Once"),
      								 gen.const("Auto", int_t, 2, "Auto")], "Set Automatic Control")

balance_ratio_enum = gen.enum([ gen.const("Red",  int_t, 0, "Red"),
    								 						gen.const("Blue", int_t, 1, "Blue")], "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`")

#       Name                    Type      Reconfiguration level             Description         Default   Min   Max
# TRIGGER
gen.add("trigger_mode",         int_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger mode", 0, edit_method = trigger_mode_enum)
# ACQUISITION
gen.add("acquisition_mode",     int_t,    SensorLevels.RECONFIGURE_RUNNING, "Camera acquiition mode", 0, edit_method = acquisition_mode_enum)
gen.add("acquisition_rate",     double_t, SensorLevels.RECONFIGURE_RUNNING, "Sets the expected triggering rate in externally triggered mode.", 15, 1, 100)
# EXPOSURE
gen.add("auto_exposure",        int_t,    SensorLevels.RECONFIGURE_RUNNING, "Sets the camera exposure. If continously automatic, causes the `~exposure` setting to be ignored.", 0, edit_method = auto_enum)
gen.add("exposure_auto_max",    int_t, 		SensorLevels.RECONFIGURE_RUNNING, "The max exposure time in auto exposure mode, in seconds.", 500000, 25, 60000000)
gen.add("exposure_auto_target", int_t,    SensorLevels.RECONFIGURE_RUNNING, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", 50, 0, 100)
gen.add("exposure",             double_t, SensorLevels.RECONFIGURE_RUNNING, "Camera exposure time in seconds.", 0.025, 0.000025, 60.0)
# GAIN
gen.add("auto_gain",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Sets the analog gain. If continously automatic, causes the `~gain` setting to be ignored.", edit_method = auto_enum)
gen.add("gain_auto_max",        double_t, SensorLevels.RECONFIGURE_RUNNING, "The max gain level in auto gain mode, in dB.", 33, 0, 33)
gen.add("gain_auto_target",     int_t,    SensorLevels.RECONFIGURE_RUNNING, "The auto gain target mean value as a percentage, from 0=black to 100=white.", 50, 0, 100)
gen.add("gain",                 double_t, SensorLevels.RECONFIGURE_RUNNING, "The gain level in dB.", 0, 0, 33)
# WHITE BALANCE
gen.add("auto_whitebalance",    int_t,    SensorLevels.RECONFIGURE_RUNNING, "Whether whitebalance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", edit_method = auto_enum)
gen.add("balance_ratio_selector",int_t,   SensorLevels.RECONFIGURE_RUNNING, "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`", 0, edit_method = balance_ratio_enum)
gen.add("balance_ratio_abs",    double_t, SensorLevels.RECONFIGURE_RUNNING, "Adjusts the gain of the channel selected in the `~BalanceRatioSelector`", 1.0, 0.25, 4.0)
# BINNING & DEDIMATION
gen.add("binning_x",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of pixels to bin together horizontally.", 1, 1, 8)
gen.add("binning_y",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of pixels to bin together vertically.", 1, 1, 14)
gen.add("decimation_x",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of decimation operations in x.", 1, 1, 8)
gen.add("decimation_y",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of decimation operations in y.", 1, 1, 8)
# ROI
gen.add("x_offset",             int_t,    SensorLevels.RECONFIGURE_RUNNING, "X offset of the region of interest.", 0, 0, 2447)
gen.add("y_offset",             int_t,    SensorLevels.RECONFIGURE_RUNNING, "Y offset of the region of interest.", 0, 0, 2049)
gen.add("width",                int_t,    SensorLevels.RECONFIGURE_RUNNING, "Width of the region of interest (0 for automatic).", 0, 0, 2448)
gen.add("height",               int_t,    SensorLevels.RECONFIGURE_RUNNING, "Height of the region of interest (0 for automatic).", 0, 0, 2050)
# ROS 
gen.add("frame_id",             str_t,    SensorLevels.RECONFIGURE_RUNNING, "The optical camera TF frame set in message headers.", "")
gen.add("trigger_timestamp_topic", 
																str_t,    SensorLevels.RECONFIGURE_STOP,    "Sets the topic from which an externally trigged camera receives its trigger timestamps.", "")
# BANDWIDTH
gen.add("auto_adjust_stream_bytes_per_second", 
																bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Whether the node should automatically adjust the data rate. Causes `~stream_bytes_per_second` to be ignored.", True)
gen.add("stream_bytes_per_second", 
																int_t, SensorLevels.RECONFIGURE_RUNNING,    "Limits the data rate of the camera.", 45000000, 1, 115000000)
# PIXEL FORMAT
gen.add("pixel_format",         int_t,    SensorLevels.RECONFIGURE_CLOSE,   "Format of the image data.", 0, edit_method=pixelformat_enum)

exit(gen.generate(PACKAGE, "avt_vimba_camera", "AvtVimbaCamera"))
